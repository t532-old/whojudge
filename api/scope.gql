extend type Query {
    scope(id: ID!): Scope
        @filterVisibility
        @retrieve(collection: "scope")
        @ifAuth
    scopes(
        where: ScopeWhereInput
        orderBy: ScopeOrderByInput
        skip: Int
        first: Int
        last: Int
    ): [Scope]!
        @filterVisibility
        @ifAuth
    sortedParticipants(id: ID!): [Participant!]
        @ifAuth
}

extend type Mutation {
    createScope: Scope!
        @ifAdmin
        @ifAuth
    updateScope(
        id: ID!
        data: ScopeUpdateInput
    ): Scope
        @ifAdmin
        @ifAuth
    deleteScope(id: ID!): Scope
        @ifAdmin
        @ifAuth
}

input ScopeWhereInput {
    id: ID
    creator: String
    title_contains: String
    OR: [ScopeWhereInput!]
    AND: [ScopeWhereInput!]
    isLinear: Boolean
    isContest: Boolean
    visible: Boolean
    from_lte: DateTime
    from_gte: DateTime
    to_lte: DateTime
    to_gte: DateTime
    createdAt_lte: DateTime
    createdAt_gte: DateTime
    updatedAt: String
    updatedAt_lte: DateTime
    updatedAt_gte: DateTime
}

enum ScopeOrderByInput {
    title_ASC
    title_DESC
    from_ASC
    from_DESC
    to_ASC
    to_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input ScopeUpdateInput {
    title: String
    isLinear: Boolean
    skippable: Int
    isContest: Boolean
    contestMode: String
    description: String
    visible: Boolean
    from: Int
    to: Int
}

type Scope {
    id: ID!
    creator: User!
    title: String!
    problems(
        where: ProblemWhereInput
        orderBy: ProblemOrderByInput
        skip: Int
        first: Int
        last: Int
    ): [Problem!]!
        @filterParticipated
        @filterScopeStarted
        @filterVisibility
    participants(sorted: Boolean! = false): [Participant!]!
    isLinear: Boolean!
    skippable: Int
    isContest: Boolean!
    contestMode: String
    description: String!
    visible: Boolean!
    from: DateTime
    to: DateTime
    createdAt: String!
    updatedAt: String!
}
