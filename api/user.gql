extend type Query {
    token(id: ID!): Token
    # tokens: Searching is unsupported
    user(id: ID, username: String): User @auth
    users(
        where: UserWhereInput
        orderBy: UserOrderByInput
        skip: Int
        first: Int
        last: Int
    ): [User]! @auth
}

extend type Mutation {
    createToken(
        id: ID, username: String
        pass: String!
    ): Token!
    deleteToken(id: ID!): Token
    createUser(
        id: ID, username: String
        pass: String!
    ): User! # TODO: CAPTCHA
    updateUser(
        id: ID, username: String
        data: UserUpdateInput!
    ): User @auth
    deleteUser(
        id: ID, username: String
        pass: String!
    ): User @auth @admin
}

input UserWhereInput {
    id: ID
    username: [String!]
    acceptedProblems: [ID!]
    attemptedProblems: [ID!]
    isAdmin: Boolean
    scopes: [ID!]
    problems: [ID!]
    createdAt_lte: DateTime
    createdAt_gte: DateTime
    updatedAt_lte: DateTime
    updatedAt_gte: DateTime
    lastSubmitAt_lte: DateTime
    lastSubmitAt_gte: DateTime
}

enum UserOrderByInput {
    username_ASC
    username_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
    lastSubmitAt_ASC
    lastSubmitAt_DESC
}

input UserUpdateInput {
    username: String
    introduction: String
    isAdmin: String
}

type Token {
    id: ID!
    user: User!
}

type User {
    id: ID!
    username: String!
    introduction: String!
    acceptedProblems: [Problem!]!
    attemptedProblems: [Problem!]!
    isAdmin: Boolean!
    scopes: [Scope!]!
    participants: [Participant!]!
    submissions: [Submission!]!
    problems: [Problem!]!
    createdAt: String!
    updatedAt: String!
    lastSubmitAt: String!
}
